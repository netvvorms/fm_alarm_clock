#ifndef __CLOCK_HH__
#define __CLOCK_HH__

template<class lcd>
class AlarmClock {
public:
  static void activate() {
    lcd::activate();
    lcd::setBrightness(0x20);
    lcd::setBacklightColor(Color<_rgb>(255, 255, 255));
  }

  template<uint8_t x, uint8_t y>
  static void printTime(const DateTime & dt) {
    static int8_t time[5] = {-1, -1, -1, -1, -1};
    static const uint8_t offset[5] = {0, 1, 9, 10, 4};
    uint8_t digits[4];

    uint8_t t;

    t = bin2bcd(dt.hour());
    digits[1] = t & 0x0F; t >>= 4;
    digits[0] = t & 0x0F;

    t = bin2bcd(dt.minute());
    digits[3] = t & 0x0F; t >>= 4;
    digits[2] = t & 0x0F;

    for (int i = 0; i < 4; ++i) {
      if(digits[i] != time[i]) {
	lcd::drawBitmap_PF(x + i*12 + offset[i], y,
			   numbers[digits[i] & 0x0F], 12, 24);
	lcd::display();

	time[i] = digits[i];
      }
    }

    t = dt.second();
    if(t != time[4]) {
      lcd::drawRectangle(x + 2*12 + offset[4]    , y + 7,
			 x + 2*12 + offset[4] + 1, y + 8,
			 t % 2, true);
      lcd::drawRectangle(x + 2*12 + offset[4]    , y + 13,
			 x + 2*12 + offset[4] + 1, y + 14,
			 t % 2, true);
      lcd::display();
      time[4] = t;
    }
  }


  template<uint8_t x, uint8_t y>
  static void printAlarm() {
    const uint8_t alarm_symbol[] = {
      0x30, 0x28, 0x38, 0x20, 0x00, // a
      0x3E, 0x00,                   // l
      0x30, 0x28, 0x38, 0x20, 0x00, // a
      0x38, 0x10, 0x08, 0x00,       // r
      0x38, 0x08, 0x30, 0x08, 0x30, // m
      0x00, 0x28, 0x00              // :
    };

    lcd::drawBitmap(x, y, alarm_symbol, 24, 8);

    for (int i = 0; i < 7; ++i) {
      lcd::drawRectangle(x + i * 14      + 25, y + 1,
			 x + i * 14+ 12 + 25, y + 6);
    }


    lcd::display();
  }

private:
  static const uint8_t numbers[][36] PROGMEM;
};

template<class lcd>
const uint8_t AlarmClock<lcd>::numbers[][36] PROGMEM = {
  { 0xF0, 0xF8, 0xF4, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0,
    0xE3, 0xF7, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0xF7, 0xE3,
    0x07, 0x0F, 0x17, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x17, 0x0F, 0x07 }, // 0
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF8, 0xF0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0xF7, 0xE3,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x07 }, // 1
  { 0x00, 0x00, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0,
    0xE0, 0xF0, 0xE8, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x0B, 0x07, 0x03,
    0x07, 0x0F, 0x17, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x10, 0x00, 0x00 }, // 2
  { 0x00, 0x00, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0,
    0x00, 0x00, 0x08, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xEB, 0xF7, 0xE3,
    0x00, 0x00, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x17, 0x0F, 0x07 }, // 3
  { 0xF0, 0xF8, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF8, 0xF0,
    0x03, 0x07, 0x0B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xEB, 0xF7, 0xE3,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x07 }, // 4
  { 0xF0, 0xF8, 0xF4, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0x00, 0x00,
    0x03, 0x07, 0x0B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xE8, 0xF0, 0xE0,
    0x00, 0x00, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x17, 0x0F, 0x07 }, // 5
  { 0xF0, 0xF8, 0xF4, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0x00, 0x00,
    0xE3, 0xF7, 0xE7, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xE8, 0xF0, 0xE0,
    0x07, 0x0F, 0x17, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x17, 0x0F, 0x07 }, // 6
  { 0x00, 0x00, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0xF7, 0xE3,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x07 }, // 7
  { 0xF0, 0xF8, 0xF4, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0,
    0xE3, 0xF7, 0xE7, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xEB, 0xF7, 0xE3,
    0x07, 0x0F, 0x17, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x17, 0x0F, 0x07 }, // 8
  { 0xF0, 0xF8, 0xF4, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0,
    0x03, 0x07, 0x0B, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0xEB, 0xF7, 0xE3,
    0x00, 0x00, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x17, 0x0F, 0x07 }, // 9
};


#endif /* __CLOCK_HH__ */
